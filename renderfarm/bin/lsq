#!/usr/bin/perl

use Cwd qw/abs_path getcwd/;
use File::Basename;
use Data::Dumper;

########################################
# Justen Marshall's "lsq" script       #
# Animal Logic (c) 1999-2004           #
#                                      #
# This script is a replacement for lsf #
# (a custom list-frames script). This  #
# does the same thing but is geared to #
# handle any numbering format. It will #
# show missing frames and calculate    #
# clip sizes. Unfortunately, it does   #
# not make coffee (yet).               #
########################################

# Variable declarations.
my @thedirs = ();
my @only = ();
my $checkcomplete;
my $checksize;
my $showmissing;
my $showlength;
my $totalsize = 0;
my $total_tt = 0;
my $numclips = 0;
my $recursive;
my $checktime;
my $checktime_days;
my $showclipsonly;
my $showhidden;
my $sizeasbytes;
my $ignoreframezero;
my $minsize = 0;
my $singlesasclips;
my $listgood;
my $debug;
my $showfirstframe = 0;

my $version = "1.17";

# This has to be something that'll NEVER be used in real file names.
my $SPLITSTR = "@@%--%@@";

# Usage message.
my $useage =<<EOF;
lsq v$version Useage:

  lsq [options] [PATH [PATH...]]

Options are any of the following:

  -h        : Display this help message.
  --help    : Display a longer help message than this.
  -s        : Show the size of the sequences.
  -b        : Show sizes in bytes, not human-readable k/M/G.
  -i        : Indicate incomplete or damaged clips.
  -g bytes  : Files smaller than this many bytes are damaged.
  -l        : Show the length of the clip (number of frames).
  -m        : Show a list of missing or empty frames, if any.
  -e        : Explicitly list files that DO exist.
  -q        : Quiet mode. Output is easier to parse in scripts.
  -R        : Recursively run lsq on sub-directories.
  -a days   : Indicate if the clip has been accessed recently.
  -c days   : Indicate if the clip has been changed recently.
  -o        : Only show clips. Single frames are not listed.
  -1        : Single files with numbers are treated as clips.
  -H        : Include hidden files (names start with ".").
  -z        : Ignore frame zero (assumed to be a slate).
  -f        : Show the full name of 1st frame of 1st clip only.
  -d        : Print verbose debugging output.

EOF

my $long_useage =<<EOF;
lsq v$version Useage:

  lsq [-h] [-s] [-i|-m] [-q] [-R] [-a|-c days] [PATH [PATH...]]

Options:

  -h
    Show this help message.

  -s
    Calculate the size of the sequences in the given path(s). If more
    than one path was given, totals will be shown for individual
    paths. A grand total is also displayed.

  -b
    Always show sizes as bytes, rather than making them nicer by
    showing as k, M or G when they are large. This is not necessary
    with the -q option, which already avoids using the human readable
    size format.

  -i
    Indicate whether clips are complete, incomplete or contain some
    damaged frames. Won't be able to identify missing frames at the
    start or end of clips, though. You should take a close look at the
    frame numbers to be sure.

  -l
    Show the length of the clip. This counts the frames that actually
    exist as part of this clip, it's not computed from the start and
    end frames.

  -m
    The same as -i, but also shows which frames are missing/damaged.
    Can be slower. Shows individual missing frames by number, and
    ranges of missing frames as min-max. It can also detect if every
    Nth frame is missing, in which case it will show the range like
    4-98x2 (every second frame between 4 and 98 inclusive are
    missing).

  -e
    Similar to -m, however instead of showing missing files it lists
    files that DO exist. This can be handy if you need to instruct
    the farm to render only the RIB files that are there, for example.

  -q
    Quiet mode. Don't print directory names or anything else other
    than the output, tab-separated.

  -R
    Recursively run lsq on sub-directories.

  -a days
  -c days
    Indicate whether ANY frames in the clip have been accessed (-a) or
    changed (-c) within the last "days" days. You can only specify one
    of these options. Note that if even one frame has been changed or
    accessed, the whole clip is considered to have been. If -s is used
    a separate total will be given for changed/accessed clip sizes
    (again, the size of the WHOLE clip is used if ANY frame was
    changed or accessed).

  -o
    Only show clips. Anything that's not recognised as a clip is
    ignored.

  -1
    Show single frames that nevertheless seem to have a frame number as
    clips (ie, replace the frame number with-#'s even though there's
    only one frame). By default this does not happen, singleton frames
    are shown as they are really called, with no min/max frame range.

  -H
    Show hidden files (names start with "."), not normally displayed.

  -z
    When this flag is set, frame 0 is ignored. Often, frame 0 is the
    slate frame, and you may need to ignore it if you want to compute
    an accurate duration for the real clip length (not counting the
    slate). This is particularly true if you are creating a new slate!

  -f
    Show the full path (no #'s) of the first frame of the first clip.
    This is useful for web page scripting, where you may need to find
    the res of a clip, for example... you'll need a frame to examine
    and this will give you the path of one.

  -g bytes[k|M|G]
    Set the threshold for detecting damaged files. By default, only
    0-byte files are detected. The size can be given as a raw number
    of bytes, or you can specify an amount in k, M or G for kilobytes,
    megabytes or gigabytes respectively (eg, -g 40k or ).

    See the "Note About Damaged Clips" below for more information on
    how damaged files/clips are defined and displayed.

  -d
    Turns on some verbose, cryptic and generally not very useful
    debugging output.

  PATH
    Specify one or more directories to look in. If you don't specify
    at least one, the current directory is assumed.

Note About Numbering Schemes
============================
  You can definately come up with numbering schemes that will break
  lsq. When that happens, you'll probably see each frame listed as a
  clip of it's own. To work around the problem, you would be best to
  simply rename your clip using 'renseq' or some similar tool.
  Alternatively, if it's a numbering scheme that you use a lot, let
  Justen know and he might be able to add support for it.

Note About Damaged Clips
========================
  A "damaged" file is taken to be one with a size less than or equal
  to a certain threshold. By default, that threshold is zero bytes, so
  only empty files will be listed as damaged. The -g flag allows you
  to specify a different threshold, so for example if you know all
  your files should be larger than 10kb, you could use -g 10000, and
  any files smaller would be marked damaged.

  When you are using the -i flag, if a clip has even one missing or
  damaged file (damaged according to the above criteria) the clip will
  simply listed as "Incomplete". If you use the -m flag, missing and
  damaged frames are explicitly listed for each affected clip.

EOF

# This sub formats an integer size as a nice number of bytes/kb/Mb/Gb.
sub formatsize {
  my ($size) = @_;

  if ( !$sizeasbytes ) {
    if ( $size>1073741824 ) {
      return sprintf( "%4.2f G", $size/1073741824 );
    }
    if ( $size>1048576 ) {
      return sprintf( "%4.1f M", $size/1048576 );
    }
    if ( $size>1024 ) {
      return sprintf( "%4.0f k", $size/1024 );
    }
  }

  return "$size b";
}

sub SplitFilename {
  my ($filename) = @_;

  my ($lhs,$number,$rhs,$nd);

  # Test a bunch of patterns.
  if ( $filename =~ /^(.*[^#])?((?<!\\)#+)(.*)$/ ) {
    # Pattern 5: Already has #'s.
    $lhs = $1;
    $number = $2;
    $rhs = $3;
  } elsif ( $filename =~ /^(.*\.)(-?\d+)(.*)$/ ) {
    # Pattern 2: Finds the right-most number, which immediately
    # follows a dot.
    $lhs = $1;
    $number = $2;
    $rhs = $3;
    print "2 - $_ => ($lhs)($number)($rhs)\n" if $debug;
  } elsif ( $filename =~ /^([^\d]*\.)(-?\d+)(.*)$/ ) {
    # Pattern 1: Finds the left-most number, which must follow a dot.
    $lhs = $1;
    $number = $2;
    $rhs = $3;
    print "1 - $_ => ($lhs)($number)($rhs)\n" if $debug;
  } elsif ( $filename =~ /^(.*[^\d])?(\d+)(\.\w*)$/ ) {
    # Pattern 3: Finds the right-most number that has a single dot
    # somewhere after it.
    $lhs = $1;
    $number = $2;
    $rhs = $3;
    print "3 - $_ => ($lhs)($number)($rhs)\n" if $debug;
  } elsif ( $filename =~ /^(.*[^\d-])?(((?<=\.)-)?\d+)(.*)$/ ) {
    # Pattern 4: Finds the left-most number. If the number is
    # negative, the '-' must follow a '.'
    $lhs = $1;
    $number = $2;
    $rhs = $4;
    print "4 - $_ => ($lhs)($number)($rhs)\n" if $debug;
  } else {
    print "x - $_\n" if $debug;
    $lhs = $filename;
  }

  # Count the number of digits, if it starts with a 0 or #.
  # Otherwise, the number can be matched with a single # and
  # so we return 0.
  my $nd = ($2 =~ /^-?[0#]/ ? length($number)==1 ? 0 : length($number) : 0);

  # Send it back.
  print "Sending back '".$lhs.$SPLITSTR.$nd.$rhs."'\n" if $debug;
  return ($lhs,$number,$rhs,$nd);
}

# A sub to parse any command-line args.
sub ParseArgs {
 arg:
  while ( $#ARGV>=0 && ($ARGV[0] =~ /^\-/)) {
    my $arg = shift(@ARGV);
    if ( $arg =~ /^-i$/ ) {
      $checkcomplete = 1;
      next arg;
    }
    if ( $arg =~ /^-s$/ ) {
      $checksize = 1;
      next arg;
    }
    if ( $arg =~ /^-m$/ ) {
      $checkcomplete = 1;
      $showmissing = 1;
      next arg;
    }
    if ( $arg =~ /^-e$/ ) {
      $checkcomplete = 1;
      $showmissing = 1;
      $listgood = 1;
      next arg;
    }
    if ( $arg =~ /^-l$/ ) {
      $showlength = 1;
      next arg;
    }
    if ( $arg =~ /^-h$/  ) {
      die $useage;
    }
    if ( $arg =~ /^--help$/  ) {
      die $long_useage;
    }
    if ( $arg =~ /^-q$/ ) {
      $quietmode = 1;
      next arg;
    }
    if ( $arg =~ /^-R$/ ) {
      $recursive = 1;
      next arg;
    }
    if ( $arg =~ /^-g$/ ) {
      $minsize = shift(@ARGV);
      # Handle k/M/G on the end.
      ( $minsize =~ /^(\d+(\.\d+)?)kB?$/i ) && do {
	$minsize = $1 * 1024;
      };
      ( $minsize =~ /^(\d+(\.\d+)?)MB?$/i ) && do {
	$minsize = $1 * 1024 * 1024;
      };
      ( $minsize =~ /^(\d+(\.\d+)?)GB?$/i ) && do {
	$minsize = $1 * 1024 * 1024 * 1024;
      };
      next arg;
    }
    if ( $arg =~ /^-a$/ ) {
      $checktime = "atime";
      $checktime_days = shift(@ARGV);
      next arg;
    }
    if ( $arg =~ /^-c$/ ) {
      $checktime = "ctime";
      $checktime_days = shift(@ARGV);
      next arg;
    }
    if ( $arg =~ /^-o$/ ) {
      $showclipsonly = 1;
      next arg;
    }
    if ( $arg =~ /^-H$/ ) {
      $showhidden = 1;
      next arg;
    }
    if ( $arg =~ /^-b$/ ) {
      $sizeasbytes = 1;
      next arg;
    }
    if ( $arg =~ /^-f$/ ) {
      $showfirstframe = 1;
      next arg;
    }
    if ( $arg =~ /^-1$/ ) {
      $singlesasclips = 1;
      next arg;
    }
    if ( $arg =~ /^-d$/ ) {
      $debug = 1;
      next arg;
    }
    if ( $arg =~ /^-z$/ ) {
      $ignoreframezero = 1;
      next arg;
    }
    die "Unknown flag: $arg\n";
  }
  while ( $#ARGV>=0 ) {

    open( my $fh, '>>/usr/local/tmp/lsq.txt');
	print $fh "parse : ".$ARGV[0]." \n";
    close($fh);

    if ( -d $ARGV[0] ) {
      push( @thedirs, shift(@ARGV) );
    } else {
      my $o = shift(@ARGV);
      push( @thedirs, File::Basename::dirname( $o ));

      # Since we want to match the pattern possibly including # signs,
      # we may have to pre-process it.
      my ($lhs,$number,$rhs,$nd) = SplitFilename(File::Basename::basename($o));
      push( @only, { pattern => $lhs.$SPLITSTR.$rhs, digits => $nd } );
    }
  }
}

# Why doesn't Perl have these?
sub max {
  my ($a,$b) = @_;
  ($a<$b ? $b : $a);
}
sub min {
  my ($a,$b) = @_;
  ($a<$b ? $a : $b);
}

# Given a list of integers, will remove the first contiguous block and
# return a string represending the min/max of that block. The range in
# the list is assumed to be in ascending order. This routine is used
# to condense a list of missing frames into a shorter representation.
# Update: 2002-06-24 Added support for step size. If every 2nd frame
# is missing (or every Nth, in fact) it will recognise that and return
# MIN-MAXxN instead of all the individual frames.
sub eatchunk {
  my ($vals) = @_;
  my ($max,$min);
  my $step = min(max(1, @$vals[1]-@$vals[0]),10);

  if ( @$vals[2] != @$vals[1]+$step ||
       @$vals[3] != @$vals[2]+$step ) {
    $step = 1;
  }

  # Take a copy, just in case we need to get back to the original
  # array.
  my @orig = @$vals;

  $max = $min = shift( @$vals );
  while ( ($#{$vals}>=0)  &&
	  (@$vals[0]==$max+$step)  ) {
    $max = shift( @$vals );
  }
  if ($min == $max) {
    return "$min";
  }
  return "$min-$max" . ($step>1 ? "x$step" : "");
}

# This does the actual lsq thang, for one given directory...
sub lsq {
  my ($thedir,$lvl) = @_;
  my @flist;
  my @dlist;
  my %seqs;
  my $dirsize = 0;
  my $dirsize_tt = 0;

  $thedir = abs_path($thedir);

  # Print the banner.
  print( "\n",
	 "   " x $lvl,
	 $thedir,
	 "\n",
       ) unless $quietmode;

  # Start by opening the current directory.
  opendir( DIR, $thedir ) || die "Couldn't open directory: ($thedir)\n";

  my @debug_bits = sort(readdir(DIR));
  rewinddir(DIR);

  # Read the list of file names.
  @dlist = grep { !($showhidden ? /^\.$/ || /^\.\.$/ : /^\./) &&
		    -d "$thedir/$_" } sort(readdir(DIR));
  rewinddir(DIR);
  @flist = grep { !($showhidden ? /^\.$/ || /^\.\.$/ : /^\./) &&
		    -f "$thedir/$_" } sort(readdir(DIR));

  print "\n" unless $quietmode;
  if ( $recursive ) {
    foreach ( @dlist ) {
      lsq("$thedir/$_",$lvl+1);
    }
    if ( $#dlist >= 0 ) {
      print "\n" unless $quietmode;
    }
  } else {
    print( "   ",
	   join("/\n   ", @dlist ),
	   "/\n",
	 ) if ( $#dlist>=0 && $#only<0) && (!$quietmode);
  }

  # Process each file name.
 filename:
  foreach my $filename ( @flist ) {
    # Protect any hashes in the original filename.
    $filename =~ s/(?<!\\)#/\\#/g;

    # Variables we'll fill from the patterns.
    my ($lhs,$number,$rhs,$nd) = SplitFilename($filename);

    # If we got no bits...
    if ( $lhs eq $filename ) {
      # ...then it's a static frame.
      push( @{$seqs{$filename}->{frames}}, undef );
      next;
    }

    # Zero-frame skipping.
    if ( $nd>0 && $number==0 && $ignoreframezero ) {
      next;
    }

    # It's possible this is frame 1000 but that frame 0999 has
    # already been processed. We'd like to think that 1000 would
    # show up as #### rather than # in that situation. Check if it's
    # so.
    my $key;
    my @seenbefore = grep { /^($lhs$SPLITSTR$rhs)$/ } keys(%seqs);
    if ( $#seenbefore>=0 ) {
      $seenbefore[0] =~ /^$lhs$SPLITSTR$rhs$/;
      my ($olddigits) = $seqs{$seenbefore[0]}->{digits};
      # If we've got "no" digits (which really just means we don't
      # start with a zero) but we'd already seen it with a padded amount
      # then we'll use the padded amount here.
      if ( $nd==0 && $olddigits>0 && length($number)>=$olddigits ) {
	$key = $seenbefore[0];
      } else {
	$key = $lhs.$SPLITSTR.$rhs;
      }
    } else {
      $key = $lhs.$SPLITSTR.$rhs;
    }

    # If we're looking for specific clips, check if this is one.
    if ( $#only >= 0 ) {
      my @cands = grep { $key eq $_->{pattern} &&
				    ( $seqs{$key}->{digits} == $_->{digits} ||
				      $seqs{$key}->{digits} == 0 ) } @only;
      next filename unless $#cands>=0;
    }

    # Save the number for later use.
    push( @{$seqs{$key}->{frames}}, $number );
    $seqs{$key}->{digits} = max($seqs{$key}->{digits},$nd);
    if ( ! defined $seqs{$key}->{mindigits} ) {
      $seqs{$key}->{mindigits} = length($number);
    } else {
      $seqs{$key}->{mindigits} = min(length($number),$seqs{$key}->{mindigits});
    }

    # If we only want the first valid FRAME, then we are done.
    if( $showfirstframe ) {
      last filename;
    }
  }

  # Have we printed any?
  my $donesome = undef;

 key:
  foreach $k ( sort(keys(%seqs)) ) {
    # If we're looking for specific clips, check if this is one.
    if ( $#only >= 0 ) {
      my @cands = grep { $k eq $_->{pattern} &&
			   ( $seqs{$k}->{digits} == $_->{digits} ||
			     ( $seqs{$k}->{digits} == 0 &&
			       $seqs{$k}->{mindigits} >= $_->{digits} ) ) } @only;
      next key unless $#cands>=0;
    }

    # Does this have a numeric component at all?
    my $hasnumeric = ($k =~ /$SPLITSTR/);
    my $numdigits = $seqs{$k}->{digits};

    # Split this filename up, removing the special splitting token, and
    # keep the start and end sections.
    my ($start,$end) = split(/$SPLITSTR/, $k );

    # We want to present filenames in a way handled by renseq. This
    # protects hash-signs in the filename, which renseq treats as
    # special characters. Note that the double-slashing is valid on
    # Unix shells like tcsh, but probably not on NT cmd prompts. Too
    # bad!
    $start =~ s/([\\\'\$\*])/\\\1/g;
    $end =~ s/([\\\'\$\*])/\\\1/g;

    # Retrieve the stored frame list. Extract the minimum and maximum
    # values (note we need to do something special to do a numerical
    # sort).
    my (@frames) = sort {$a <=> $b} @{$seqs{$k}->{frames}};
    my $min = $frames[0];
    my $max = $frames[$#frames];

    next key if ( $showclipsonly &&
		  ((!$hasnumeric || $min==$max) && !$singlesasclips) );

    # Figure out required zero-padding.
    #my $numdigits = ($min =~ /^0/ ? length($min) : 1);

    # The list of missing frames.
    my @missing = ();

    # The list of short (0-byte or identifiably corrupt) frames.
    my @shortframes = ();

    # The total size of the sequence.
    my $seqsize = 0;
    my ($msg,$out,$extra) = "";

    # Whether the clip has been changed/accessed or not.
    my $timetest = 0;

    # Loop over the numbers (if there are any).
    my $fn;
    if ( $#frames>=0 ) {
      if ( $max-$min>50000 ) {
        $msg .= "(Too Many Frames - Info Not Complete!)";
      } else {
        for ( $fn=$min ; $fn<=$max ; ++$fn ) {
          my $ffn;
          if ( $hasnumeric ) {
            $ffn = sprintf( "%0${numdigits}d", ${fn} );
          } else {
            $ffn = "";
          }

          if ( $checkcomplete ) {
            if (! -f "$thedir/${start}${ffn}${end}") {
              push( @missing, $ffn );
            } elsif (-s "$thedir/${start}${ffn}${end}" <= $minsize) {
              push( @shortframes, $ffn );
            }
          }
          if ( $checksize ) {
            ($seqsize += -s "$thedir/${start}${ffn}${end}") ;
          }
          if ( $timetest == 0 ) {
            if ( $checktime eq "atime" ) {
              (-A "$thedir/${start}${ffn}${end}" < $checktime_days) &&
                ($timetest = 1);
            } elsif ( $checktime eq "ctime" ) {
              (-M "$thedir/${start}${ffn}${end}" < $checktime_days) &&
                ($timetest = 1);
            }
          }
	}
      }
    } else {
      $seqsize += -s "$thedir/$k" if $checksize;
    }

    # If the time-test passed, add to the message.
    if ( $timetest == 1 ) {
      $dirsize_tt += $seqsize;
      $total_tt   += $seqsize;
      if ( $checktime eq "atime" ) {
	$msg .= "(Accessed) ";
      } elsif ( $checktime eq "ctime" ) {
	$msg .= "(Changed) ";
      }
    }

    # If there's more than 1 frame (counting from 0 remember!) then we
    # want to replace the frame number with the right pattern of #
    # signs (as per renseq).
    if ( $#frames>0 ) {
      # This builds the name of the clip as shown in lsq output.
      $out = ( $start.
	       "#" x ($numdigits || 1).
	       $end );

      # If we want to show missing frames...
      if ( $showmissing && ($#missing>=0 ||
			    $#shortframes>=0) ) {
	# ...we don't want to just list them, there could be thousands
	# of them and it could get very messy. Instead, we want to
	# break it into ranges of missing chunks. @ml holds each
	# chunk.
	if( $listgood ) {
	  my @goodframes = @frames;
	  my @gf;
	  while ( $#goodframes>=0 ) {
	    # The eatchunk routine actually removes a block of
	    # increasing missing frame numbers from the @missing array,
	    # and returns a short string describing the range, for
	    # example "10..500". Much nicer than listing hundreds of
	    # missing frame numbers individually.  Note that it doesn't
	    # handle steps other than 1. If you had a clip rendered
	    # every second frame, this list would be miserable. Oh well,
	    # that's an un-handled case at this time.
 	    push( @gf, eatchunk( \@goodframes ));
	  }
	  $msg .= "(Exist: ".join(', ', @gf).')' if ($#gf>=0);
	} else {
	  my @ml;
	  my $nmissing = $#missing + 1;
	  while ( $#missing>=0 ) {
	    # The eatchunk routine actually removes a block of
	    # increasing missing frame numbers from the @missing array,
	    # and returns a short string describing the range, for
	    # example "10..500". Much nicer than listing hundreds of
	    # missing frame numbers individually.  Note that it doesn't
	    # handle steps other than 1. If you had a clip rendered
	    # every second frame, this list would be miserable. Oh well,
	    # that's an un-handled case at this time.
 	    push( @ml, eatchunk( \@missing ));
	  }

  	  # Override the completeness message with our new list.
	  $msg .= "(Missing $nmissing Frames: ".join(', ', @ml).")" if ($#ml>=0);
	}

	@ml = ();
	while ( $#shortframes>=0 ) {
	  # The eatchunk routine actually removes a block of
	  # increasing missing frame numbers from the @missing array,
	  # and returns a short string describing the range, for
	  # example "10..500". Much nicer than listing hundreds of
	  # missing frame numbers individually.  Note that it doesn't
	  # handle steps other than 1. If you had a clip rendered
	  # every second frame, this list would be miserable. Oh well,
	  # that's an un-handled case at this time.
 	  push( @ml, eatchunk( \@shortframes ));
	}
	$msg .= "(Damaged: ".join(', ', @ml).")" if ($#ml>=0);

      } else {
	# This displays the completeness state of the clip.  Note that
	# it will be overridded later if the clip is incomplete and we
	# need to display the missing frame list.
	$msg .= ($#missing>=0 ? "(Incomplete)" :
		 $#shortframes>=0 ? "(Some Damaged Files)" :
		 "(Complete)") if $checkcomplete;
      }
    } else {
      # Only one frame, so just reassemble the original frame name.
      # If it's a single frame, and it has a numeric component,
      # show it with hash signs.
      $out = ( $start.
	       ($singlesasclips && $hasnumeric ? "#" x ($numdigits||1) : $min).
	       $end );
    }

    # Add the base path if we're in quiet mode.
    $out = "$thedir/$out" if $quietmode;

    # Do some stuff with the sequence size. Format it, and also adjust
    # the dir and grand total values. We only need to do this if we're
    # checking sizes at all..
    my $fmtsize;
    if ( $checksize ) {
      if ( $quietmode ) {
	$fmtsize = $seqsize;
      } else {
	$fmtsize = formatsize($seqsize);
      }
      $dirsize += $seqsize;
      $totalsize += $seqsize;
    }

    # If we're showing length...
    my $length;
    my $l;
    if ( $showlength ) {
      $length = ($#frames+1);
      $l = 5;
    }

    # Print the row. Single frames shouldn't have a frame count. All
    # other fields will be filled in before we get this far.
    my $wid = 40 - ($lvl*3);
    $wid = 0 if $wid < 0;
    my $pad = " " x ($wid - length($out) - 1);
    my $mask = ("   "x($lvl+1))."%s $pad %5s %5s %${l}s %6s %s\n" unless $quietmode;
    $mask = "%s\t%s\t%s\t%s\t%s\t%s\n" if $quietmode;
    printf( $mask,
	    $out,
	    (($#frames>0 || $singlesasclips) ? $min : undef),
	    (($#frames>0 || $singlesasclips) ? $max : undef),
	    $length,
	    $fmtsize,
	    $msg,
	  );
    $donesome = 1;
    ++$numclips;
  }

  if ( !$donesome ) {
    my $msg = "(No Files)";
    if ( $showclipsonly ) {
      $msg = "(No Matching Files)";
    }
    printf( "%s$msg\n",
	    "   "x($lvl+1),
	  ) unless $quietmode;
  }

  # Print the per-directory total summary, if required.
  {
    my $pad = 61 - $lvl*3 + ($showlength ? 4 : -1);
    my $extra;
    if ( $checktime ) {
      my $msg = ($checktime eq "atime" ? "Accessed" : "Changed");
      $extra = sprintf("\n%s%${pad}s",
		       "   " x ($lvl+1),
		       "$msg: ".formatsize(int($dirsize_tt)),
		      );
    }
    printf( "%s%s\n%s%${pad}s$extra\n",
	    "   " x ($lvl+1),
	    "-" x $pad,
	    "   " x ($lvl+1),
	    formatsize($dirsize),
	  ) if ($checksize && !$quietmode);
  }
}

# Parse the users command-line args.
ParseArgs();

# If no dirs were given, assume local pwd.
push( @thedirs, getcwd ) if $#thedirs<0;

# Run the lsq on the directories...
my $d;
foreach $d ( @thedirs ) {
  open( my $fh, '>>/usr/local/tmp/lsq.txt');
  print $fh "thedir: $d \n";
  close($fh);
  lsq( $d );
}

# If we're checking sizes, and there was more than one directory
# listed, then we should print the grand totals.
if ( $checksize && ( $#thedirs>0 || $recursive ) ) {
  my $extra;
  if ( $checktime ) {
    my $msg = ($checktime eq "atime" ? "Accessed" : "Changed");
    $extra = sprintf("\n%s%61s",
		     "   ",
		     "$msg: ".formatsize($total_tt)
		    );
  }
  printf( "\n%s\n%64s%s\n\n",
	  "=" x 64,
	  "Total: ".
	  formatsize($totalsize),
	  $extra,
	) unless $quietmode;
} else {
  print "\n\n" unless $quietmode;
}

# Set the exit value to the number of clips, if that makes sense.
if ( $quietmode ) {
  exit $numclips;
}
