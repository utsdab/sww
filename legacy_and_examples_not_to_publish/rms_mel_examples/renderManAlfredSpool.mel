// $Revision: #1 $ $Date: 2014/12/11 $
//
// Copyright (c) 2006 PIXAR.  All rights reserved.  This program or
// documentation contains proprietary confidential information and trade
// secrets of PIXAR.  Reverse engineering of object code is prohibited.
// Use of copyright notice is precautionary and does not imply
// publication.
//
//                      RESTRICTED RIGHTS NOTICE
//
// Use, duplication, or disclosure by the Government is subject to the
// following restrictions:  For civilian agencies, subparagraphs (a) through
// (d) of the Commercial Computer Software--Restricted Rights clause at
// 52.227-19 of the FAR; and, for units of the Department of Defense, DoD
// Supplement to the FAR, clause 52.227-7013 (c)(1)(ii), Rights in
// Technical Data and Computer Software.
//
// Pixar Animation Studios
// 1200 Park Avenue
// Emeryville, CA  94608
//
// --------------------------------------------------------------------------

// NB: the term Alfred now refers to the *format* of the job-description
//  script.  A non-zero rmanAlfredSpool option selects the queuing
//  system will be employed to perform the job.
//   0: standard maya spool
//   1: Alfred
//   2: Tractor
//   3: LocalQueue
// Spool scripts must return the name of the alfred script that they generate.

proc string rmanGetSpoolFileName()
{
    int $ctxWasOpen = `rman ctxIsOpen`;
    if(!$ctxWasOpen) {
        eval("rman ctxOpen");
    }

    string $id = `getpid`;
    $id += floor(`rand 1000`);
    string $scriptFile = (`rmanGetDataDir` +"/spool_"+$id+".alf");
    if( !$ctxWasOpen )
        eval("rman ctxClose"); // close context if we opened it above
    return $scriptFile;
}

global proc string rmanSpoolMayaLocal()
{
    string $bctx = rmanBeginBatchContext(1/*sync slim*/); 

    // Don't need to generate RIB because RfM will render internally.
    // Write out the alfred script file.
    global int $gRManAlfredFramesPerServer;
    string $scriptFile = `rmanGetSpoolFileName`;
    rmanWriteAlfredScript("mayabatch local", $scriptFile,
                          $gRManAlfredFramesPerServer, "");

    rmanEndBatchContext($bctx);
    return $scriptFile;
}

global proc string rmanSpoolMayaRemote()
{
    string $bctx = rmanBeginBatchContext(1/*sync slim*/); 

    // Don't need to generate RIB because RfM will render internally.

    // Write out the alfred script file.
    global int $gRManAlfredFramesPerServer;
    string $scriptFile = `rmanGetSpoolFileName`;
    rmanWriteAlfredScript("mayabatch remote", $scriptFile,
                          $gRManAlfredFramesPerServer, "");

    rmanEndBatchContext($bctx);
    return $scriptFile;
}

proc string rmanGetSpoolModeArg(string $style)
{
    string $spoolMode = " -spoolMode 1 ";// local
    if( `gmatch $style "*netrender*"` ) {
        $spoolMode = " -spoolMode 2 "; // netrender
    } else if( `gmatch $style "*remote*"` ) {
        $spoolMode = "-spoolMode 3 "; // remote
    }
    return $spoolMode;
}

global proc string rmanSpoolLocalPreviewNetrender()
{
    return `rmanSpoolLocalPreview "preview netrender"`;
}

global proc string rmanSpoolLocalPreviewRender()
{
    return `rmanSpoolLocalPreview "preview local"`;
}

global proc string rmanSpoolRemotePreviewRender()
{
    return `rmanSpoolLocalPreview "preview remote"`;
}

global proc string rmanSpoolLocalPreview(string $style)
{
    global string $gRManPreviewRenderPass;
    global string $gRManPreviewRenderCamera;

    string $cam = `rmanGetCurrentCamera`;
    if($gRManPreviewRenderCamera != "")
        $cam = $gRManPreviewRenderCamera;

    // Locally generate RIB for the preview camera.
    string $melScript = `getAttr defaultRenderGlobals.preRenderLayerMel`;
    if( $melScript != "" ) 
        eval $melScript;
    string $execdir = "";
    string $dspyArgs = `rmanGetPreviewDspyParams`;

    string $cacheCrew = "";
    if( `optionVar -exists renderViewRenderSelectedObj` &&
        `optionVar -q renderViewRenderSelectedObj` )
    {
        $cacheCrew += " -cacheCrew __selection ";
    }

    string $spoolMode = `rmanGetSpoolModeArg $style`;

    int $testRes[] = `rmanGetTestResolution`;

    string $layer = `editRenderLayerGlobals -q -currentRenderLayer`;
    eval("rman ctxOpen -rib -camera \""+ $cam +"\" -resolution "+$testRes[0] + " "+$testRes[1] + " -previewPass \""+$gRManPreviewRenderPass+"\" -layer \""+$layer+"\" "+$cacheCrew+$dspyArgs+$spoolMode);
    eval("rman genrib");

    $execdir = `rman workspace GetProdDir`;
    if( size($execdir) == 0 )
        $execdir = `rman workspace GetRootDir`;

    // Write out the alfred script file.
    global int $gRManAlfredFramesPerServer;
    string $scriptFile = `rmanGetSpoolFileName`;
    rmanWriteAlfredScript($style, $scriptFile, 
                          $gRManAlfredFramesPerServer, "");

    // Move into the rib dir
    if( size($execdir) ) {
        chdir $execdir;
    }

    $melScript = `getAttr defaultRenderGlobals.postRenderLayerMel`;
    if( $melScript != "" ) 
        eval $melScript;

    return $scriptFile;
}

global proc string rmanSpoolImmediateRIB(string $style)
{
    // Locally generate RIB for each layer of the sequence.
    // As this is a batch-like mode, we want the results to be
    // contextualizable to ensure that ongoing preview work doesn't
    // interfere with batch rendering.
    string $execdir = "";
    string $curLayer = `editRenderLayerGlobals -q -currentRenderLayer`;
    string $renderLayers[]; clear($renderLayers);
    $renderLayers = `listConnections renderLayerManager.renderLayerId`;
    string $spoolMode = `rmanGetSpoolModeArg $style`;
    int $i;
    int $numLayers = size($renderLayers);
    string $scenefile = rmanGetSceneFile();
    string $bctx = rmanBeginBatchContext(1/*sync slim*/); 
    for( $i=0; $i<$numLayers; $i++ ) 
    {
        string $layer = $renderLayers[$i];
        if( !`getAttr ($renderLayers[$i] + ".renderable")` ) {
            continue;
        }
        editRenderLayerGlobals -currentRenderLayer $layer;
        eval("rman ctxOpen -rib -layer " + $layer+$spoolMode);
        string $melScript = `getAttr defaultRenderGlobals.preRenderLayerMel`;
        if( $melScript != "" ) 
            eval $melScript;
        eval("rman genrib -layer "+$layer);
        $melScript = `getAttr defaultRenderGlobals.postRenderLayerMel`;
        if($melScript != "")
            eval $melScript;
        eval("rman ctxClose");
    }
    editRenderLayerGlobals -currentRenderLayer $curLayer;
    $execdir = `rman workspace GetProdDir`;
    if( size($execdir) == 0 )
        $execdir = `rman workspace GetRootDir`;

    // Write out the alfred script file
    global int $gRManAlfredFramesPerServer;
    string $scriptFile = `rmanGetSpoolFileName`;
    rmanWriteAlfredScript($style, $scriptFile, $gRManAlfredFramesPerServer, "");
    
    rmanEndBatchContext($bctx);

    // Move into the rib dir. We assume that caller is resposible for
    // restoring cwd.
    if( size($execdir) ) {
        chdir $execdir;
    }

    return $scriptFile;
}

global proc string rmanSpoolImmediateRIBLocalRender()
{
    return `rmanSpoolImmediateRIB("immediate rib, local render")`;
}

global proc string rmanSpoolImmediateRIBRemoteRender()
{
    return `rmanSpoolImmediateRIB("immediate rib, remote render")`;
}

global proc string rmanSpoolDeferredRIBRemoteRender()
{
    global int $gRManAlfredFramesPerServer;

    // Don't need to generate RIB because it's deferred to the alfred job.
    // But we do need to know which RIB files will get written.

    string $bctx = rmanBeginBatchContext(1/*sync slim*/); 

    // Write out the alfred script file
    string $scriptFile = `rmanGetSpoolFileName`;
    rmanWriteAlfredScript("deferred rib, remote render", $scriptFile,
                          $gRManAlfredFramesPerServer, "");

    rmanEndBatchContext($bctx);
    return $scriptFile;
}

global proc string rmanSpoolRemoteRIBRemoteRender()
{
    global int $gRManAlfredFramesPerServer;

    // Don't need to generate RIB because it's deferred to the alfred job.

    string $bctx = rmanBeginBatchContext(1/*sync slim*/); 

    // Write out the alfred script file
    string $scriptFile = `rmanGetSpoolFileName`;
    rmanWriteAlfredScript("remote rib, remote render", $scriptFile, 
                          $gRManAlfredFramesPerServer, "");

    rmanEndBatchContext($bctx);
    return $scriptFile;
}


global proc string rmanAlfredCollectArgs(int $pause, int $priority, string $script)
{
    string $cmd="";
    if ($pause) $cmd += "-pause ";
    $cmd += "-pbias " + $priority + " ";
    if ($script != "") $cmd += "\"" + $script + "\"";
    return $cmd;
}

global proc string rmanTractorCollectArgs(int $pause, int $priority, string $engine, string $user, string $script)
{
    string $cmd="[";
    if ($pause) $cmd += "'--paused', ";
    $cmd += "'--priority=" + $priority + "', ";
    if ($engine != "") $cmd += "'--engine=" + $engine + "', ";
    if ($user != "") $cmd += "'--user=" + $user + "', ";
    if ($script != "") $cmd += "'" + $script + "'";
    $cmd += "]";
    return $cmd;
}

global proc string rmanLocalQueueCollectArgs(int $pause, string $script)
{
    string $cmd="";
    
    // TODO: enable the LocalQueue to start in a paused state.
    // if ($pause) $cmd += "-pause ";
    
    if ($script != "") {
        $cmd += "\"" + $script + "\"";
    }
    return $cmd;
}

global proc renderManAlfredSpool(string $style, int $chunk, string $opts)
{
    int $ctxWasOpen = `rman ctxIsOpen`;
    // Run pre (job) mel script
    string $melScript = `getAttr defaultRenderGlobals.preMel`;
    if( $melScript != "" ) 
        eval $melScript;

    global int $gRManAlfredFramesPerServer;
    if( $chunk > 0 )
        $gRManAlfredFramesPerServer = $chunk;
    else
        $gRManAlfredFramesPerServer = 100;
    string $origDir = `pwd`;
    sysFile -makeDir `rmanGetDataDir`;

    // Now the alfred script is generated.
    // There's a pref called AlfredSpoolScripts in RenderMan_for_Maya.ini
    // which is a table of script names for spool styles.
    // Here the script for the given label is executed. The script needs 
    // to return the name of the alfred script it has generated.
    string $spoolScript = `rmanGetSpoolScript $style`;
    int $priority = `optionVar -query "rmanAlfredPriority"`;
    int $pause = 0;
    if( $spoolScript == "" ) {
        $spoolScript = `rmanGetPreviewRenderSpoolScript $style`;
        $priority = `optionVar -query "rmanPreviewAlfredPriority"`;
    } else {
        // only pay attention to paused setting in batch mode
        if( `optionVar -exists "rmanAlfredPaused"` ) {
            $pause = `optionVar -query "rmanAlfredPaused"`;
        }
    }
    string $scriptFile = `eval( $spoolScript )`;
    string $tractorengine = `eval("rman getPref TractorEngine")`;
    string $tractoruser = `eval("rman getPref TractorUser")`;
    string $qs = `rmanGetQueuingSystem`;


    // Launch Alfred, Tractor, or the LocalQueue with the job script
    
    if( $qs == "alfred" ) {
        string $alfopts = rmanAlfredCollectArgs($pause, $priority, $scriptFile);
        rmanInfo("Spooling " + $scriptFile + " to Alfred.");
        rmanStartAlfred($alfopts);
    } else if( $qs == "tractor" ) {
        string $alfopts = rmanTractorCollectArgs($pause, $priority, $tractorengine, $tractoruser, $scriptFile);
        rmanInfo("Spooling " + $scriptFile + " to the Tractor engine: " + $tractorengine);
        rmanStartTractor($alfopts);
    } else {
        string $lqopts = rmanLocalQueueCollectArgs($pause, $scriptFile);
        rmanInfo("Spooling " + $scriptFile + " to the LocalQueue.");
        rmanStartLocalQueue($lqopts);
    }
    chdir $origDir;

    if( !$ctxWasOpen )
        eval("rman ctxClose"); // closes context if it's open

    // Run post (job) mel script
    $melScript = `getAttr defaultRenderGlobals.postMel`;
    if( $melScript != "" ) 
        eval $melScript;
}
