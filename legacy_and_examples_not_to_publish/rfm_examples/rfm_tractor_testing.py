import os
import os.path
import tractor.api.author as author
import getpass
import socket
import time
import datetime
import logging


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
sh = logging.StreamHandler()
sh.setLevel(logging.INFO)
formatter = logging.Formatter('%(levelname)5.5s \t%(name)s \t%(message)s')
sh.setFormatter(formatter)
logger.addHandler(sh)



def add_prman_render_task(parentTask, title, threads, rib, img, args=[]):
    """Create a single prman task for a Tractor job.

    Args:
    - parentTask (Task) - parent task that this prman task belongs to.
    - title (str) - title to use for this task.
    - threads (int) - number of threads to use for this prman task.
    - rib (str) - full path to the RIB file to render.
    - img (str) - full path to the image file that will be generated by the
                  prman task. This is used to create the preview/chaser task.
    - args (list) - other args to pass to prman
    """

    task = author.Task()
    task.title = title
    if img:
        task.preview = 'sho %s' % str(img)

    command = author.Command(local=False, service="PixarRender")
    command.argv = ["prman"]
    for arg in args:
        command.argv.append(arg)

    for arg in ["-Progress", "-t:%d" % threads, "%%D(%s)" % rib]:
        command.argv.append(arg)

    task.addCommand(command)
    parentTask.addChild(task)

def create_tractor_job():
    """Create a single Tractor Job.

    Args:
    - none
    """
    logger.info("Starting job BUILD")

    # ################ 0 JOB ################
    renderjob = author.Job(title="RFM: {} {} {}-{}".format(
          self.job.username, self.scenename, self.job.jobstartframe, self.job.jobendframe),
          priority=10,
          envkey=[self.envkey_rfm,self.envkey_maya,"ProjectX",
                "TYPE={}".format(self.job.envtype),
                "SHOW={}".format(self.job.envshow),
                "PROJECT={}".format(self.job.envproject),
                "SCENE={}".format(self.job.envscene),
                "SCENENAME={}".format(self.scenebasename)],
          metadata=_jsonJobMetaData,
          comment="User is {} {} {}".format(self.job.useremail,self.job.username,self.job.usernumber),
          projects=[str(self.job.department)],
          tier=str(self.job.farmtier),
          tags=["theWholeFarm", ],
          service="")


def add_maya_batch_render_task(parentTask, title, stash_scene_name, img, is_anim, start, end,by, args=[]):
    """Create a single Maya Render task for a Tractor job.

    Args:
    - parentTask (Task) - parent task that this Maya Render task belongs to.
    - title (str) - title to use for this task.
    - stash_scene_name (str) - full path to the scene file name.
    - img (str) - full path to the image file to create the preview/chaser task.
                  Only used if start==end i.e.: a single frame render.
    - is_anim (bool) - emit start, end, by args to the batch render command
    - start (int) - the start frame for an animation sequence.
    - end (int) - the end frame for an animation sequence.
    - by (int) - by frame (or step) for an animation sequence.
    - args (list) - other args to pass to maya batch
    """

    task = author.Task()
    task.title = title
    if start == end:
        if img:
            task.preview = 'sho %s' % str(img)

    command = author.Command(local=False, service="PixarRender")
    proj = mc.workspace(q=True, rd=True)

    rendercmd = "Render"
    command.argv = [ rendercmd, "-r", "renderman", "-proj", "%%D(%s)" % proj]
    for arg in args:
        command.argv.append(arg)

    if is_anim:
        command.argv.append("-s")
        command.argv.append(start)
        command.argv.append("-e")
        command.argv.append(end)
        command.argv.append("-b")
        command.argv.append(by)

    command.argv.append("%%D(%s)" % stash_scene_name)

    task.addCommand(command)
    parentTask.addChild(task)

def add_txmake_task(parentTask, title, args):
    """Create a single txmake task for Tractor job.

    Args:
    - parentTask (Task) - parent task that this txmake task belongs to.
    - title (str) - title to use for this task.
    - args (list) - txmake args including input and output name

    """
    task = author.Task()
    task.title = title

    command = author.Command(local=False, service="PixarRender")
    argv = ['txmake'] + args
    command.argv = argv

    task.addCommand(command)
    parentTask.addChild(task)

def add_denoise_task(parentTask, title, args, imgs, preview_imgs=[], variance_files=[]):
    """Create a single denoise task for Tractor job.

    Args:
    - parentTask (Task) - parent task that this denoise task belongs to.
    - title (str) - title to use for this task.
    - args (list) - arguments to denoiser
    - imgs (list) - list of images to be denoised
    - preview_imgs (list) - list of images to generate preview tasks
    - variance_files (list) - list of variance files

    """
    task = author.Task()
    task.title = title

    command = author.Command(local=False, service="PixarRender")
    command.argv = ["denoise"]
    for arg in args:
        command.argv.append(arg)
    for f in variance_files:
        command.argv.append("%%D(%s)" % f)

    for f in imgs:
        command.argv.append("%%D(%s)" % f)

    if preview_imgs:
        imgs = " ".join(str(x) for x in preview_imgs)
        task.preview = 'sho %s' % str(imgs)

    task.addCommand(command)
    parentTask.addChild(task)
